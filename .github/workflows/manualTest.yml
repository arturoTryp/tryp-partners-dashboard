Cover image for C√≥mo usar los secrets de Github
Roberto Morais
Roberto Morais
Posted on 8 nov 2020

C√≥mo usar los secrets de Github
#
github
#
ci
#
deploy
#
deployments
Lo m√°s probable es que como desarrollador hayas usado o uses en tu d√≠a a d√≠a la plataforma de Github para proteger y versionar tu c√≥digo.

Desde hace mucho tiempo la plataforma de esta empresa, que inicialmente solo se usaba para almacenar el c√≥digo de tu aplicaci√≥n, tambi√©n puede funcionar como un servidor de tu web y por ello tiene los llamados Secrets y Actions, dos tecnolog√≠as que debes dominar si quieres publicar, de forma segura, tu plataforma en el servidor de Github.

Empecemos por el principio.

¬øQu√© son los Secrets?
Github llama Secrets a los datos que no se deben compartir en el propio c√≥digo por seguridad. Por ejemplo, la semilla o seem que estamos usando para encriptar y generar un JSON Web token v√°lido para nuestros servidor de API REST.

¬øQu√© son los Actions?
Son flujos de trabajo que desatamos cuando hacemos una determinada acci√≥n sobre nuestro repositorio. Por ejemplo, un sistema de integraci√≥n continua en el que le decimos que cada vez que se haga push sobre la rama Master se ejecute una acci√≥n.

Una vez que conocemos la teor√≠a, vamos a la pr√°ctica.

Usar Secrets y Actions
Crear un Secret en Github
En este ejemplo vamos a crear un Secret para guardar la KEY de la API de Google maps, de este modo si alguien decide coger nuestro c√≥digo, no tendr√° nuestra clave de API de Google maps. (Todos sabemos que la podr√≠a sacar inspeccionando elemento en su google chrome y revisando el header de la web, pero no queremos pon√©rselo tan f√°cil.)

Vamos a las Settings de nuestro repositorio de Github, en el que queremos usar los Secrets, y en el men√∫ de la izquierda nos aparece la opci√≥n de los secrets y al no tener ninguno lo veremos as√≠:

Imagen de Secrets 1

Pulsando en New Secret cargas el formulario para a√±adir un nuevo Secret a ese repositorio, en el que deberas indicar un nombre y un valor al secreto:

Imagen de Secrets 2

Una vez ambos datos sean correctos, guarda el secreto y ya habr√°s generado con √©xito el primer Secret de tu repositorio, pero ahora debemos usarlo en nuestro c√≥digo y para ello tenemos que crear un Action para nuestro repositorio.

Crear un Action CI
Para ello vamos a pinchar en Actions, dentro del men√∫ de nuestro repositorio:

Imagen de Secrets 3

Al pulsar en Actions lo primero que veremos ser√° los workflows sugeridos por Github dependiendo el lenguaje que usemos en ese repositorio:

Imagen de Secrets 4

Aunque si bajamos hasta abajo del todo veremos una opci√≥n para a√±adir un workflow en blanco, lo que nos genera una estructura b√°sica:

Imagen de Secrets 5

En este caso seleccionamos la opci√≥n de "Manual workflow" porque m√°s abajo tenemos un ejemplo de configuraci√≥n de CI (Integraci√≥n Continua) para asignar el Secret a una variable de entorno, lo que nos permitir√° usar esa variable en nuestro c√≥digo. Basta con que sustituyas el c√≥digo de ejemplo por este:
name: Build and Deploy to GitHub Pages on Push

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Build and Deploy
        uses: JamesIves/github-pages-deploy-action@master
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          API_GOOGLE_MAP: ${{ secrets.API_GOOGLE_MAP }}
          BRANCH: gh-pages
          FOLDER: public
          BUILD_SCRIPT: yarn && yarn run build
En esta configuraci√≥n hacemos que cuando se haga un push a la rama master de nuestro repositorio se ejecute la acci√≥n o Job: build-and-deploy que monta nuestra web sobre la √∫ltima versi√≥n de un ubuntu y ejecuta dos acciones:

Checkout: Lanza el comando de git checkout a la rama master dentro del ubuntu.
Build and Deploy: Primero compila el c√≥digo de nuestra web, lanzado el comando yarn run build. Despu√©s hace la acci√≥n de asignar las variables de entorno con los secrets que hemos creado : secrets.API_GOOGLE_MAP a la variable de entorno API_GOOGLE_MAP. Para ello usamos lo que ha desarrollado James Ives en su repositorio: github-pages-deploy-action@master pas√°ndole las variables que necesita en el env. El resultado de este Job se guarda en la rama indicada en la variable: BRANCH y en este caso es el contenido de la carpeta (FOLDER) public de nuestro c√≥digo.
En este ejemplo, uso este action para una web hecha con Gatsby, por eso uso la carpeta public ya que es donde genera el c√≥digo est√°tico de la web al lanzar el comando build.

Usar los Secrets como variables de entorno
Por ultimo, para usar las variables de entorno en nuestro c√≥digo, solo tenemos que poner lo siguiente:
process.env.NOMBRE_VARIABLE; // in JavaScript
getenv('MODE'); // in PHP
Discussion (0)
Subscribe
pic
Add to the discussion
Code of Conduct ‚Ä¢ Report abuse
DEV runs on 100% open source code known as Forem.
 
Contribute to the codebase or host your own.
 
Check these out! üëá

Main Forem Repo
Self-Host Instructions
Read next
pwd9000 profile image
Run Docker based GitHub runner containers on GitHub Codespaces
Marcel.L - Aug 14

josh_smith profile image
Learn GitHub's site wide keyboard shortcuts
Josh Smith - Jul 15

2kabhishek profile image
I Made a Web App to Showcase all your GitHub Projects üòç‚ú®
Abhishek Keshri - Jul 30

sanixdarker profile image
How to clone a sub directory of a git project (not a zip)
darker - Aug 12


Roberto Morais
Follow
I am a web application software programmer, I love learning new things and sharing experiences and knowledge with others.
LOCATION
Spain
WORK
Senior Developer
JOINED
8 abr 2020
More from Roberto Morais
Qu√© es deployer y c√≥mo usarlo
#php #deploy #webdev
name: Build and Deploy to GitHub Pages on Push

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Build and Deploy
        uses: JamesIves/github-pages-deploy-action@master
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          API_GOOGLE_MAP: ${{ secrets.API_GOOGLE_MAP }}
          BRANCH: gh-pages
          FOLDER: src
          BUILD_SCRIPT: yarn && yarn run build
